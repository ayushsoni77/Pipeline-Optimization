Secret Scanning and Validation
Implementing automated secret detection prevents accidental exposure of sensitive information in code repositories and build artifacts.

Pre-commit Secret Scanning validates code changes before they enter the repository:

groovy
pipeline {
    agent any
    stages {
        stage('Secret Scanning') {
            steps {
                script {
                    // Scan for secrets in source code
                    def secretScanResults = sh(
                        script: '''
                            # Use multiple secret scanning tools
                            truffleHog --regex --entropy=False . > trufflehog-results.json
                            detect-secrets scan --all-files . > detect-secrets-results.json
                            gitleaks detect --source . --report-format json --report-path gitleaks-results.json
                        ''',
                        returnStatus: true
                    )
                    
                    // Parse and analyze results
                    def secretsFound = parseSecretScanResults()
                    
                    if (secretsFound.size() > 0) {
                        currentBuild.result = 'FAILURE'
                        error("Secret scanning detected ${secretsFound.size()} potential secrets in code")
                    }
                    
                    // Scan build artifacts
                    sh 'mvn clean package'
                    
                    def artifactSecrets = sh(
                        script: 'find target -name "*.jar" -exec unzip -l {} \\; | grep -E "(password|secret|key|token)" || true',
                        returnStdout: true
                    ).trim()
                    
                    if (artifactSecrets) {
                        currentBuild.result = 'UNSTABLE'
                        echo "WARNING: Potential secrets found in build artifacts"
                    }
                }
            }
        }
        stage('Secret Validation') {
            steps {
                script {
                    // Validate that required secrets are properly configured
                    def requiredSecrets = ['database-password', 'api-key', 'ssl-certificate']
                    
                    requiredSecrets.each { secretId ->
                        try {
                            withCredentials([string(credentialsId: secretId, variable: 'SECRET_VALUE')]) {
                                if (!env.SECRET_VALUE || env.SECRET_VALUE.length() < 8) {
                                    error("Secret ${secretId} is missing or too short")
                                }
                                
                                // Validate secret format/pattern
                                validateSecretFormat(secretId, env.SECRET_VALUE)
                            }
                        } catch (Exception e) {
                            error("Failed to access required secret: ${secretId}")
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            // Archive secret scan results for security review
            archiveArtifacts artifacts: '*-results.json', allowEmptyArchive: true
            
            // Clean up temporary files containing sensitive data
            sh 'find . -name "*-results.json" -exec shred -vfz -n 3 {} \\;'
        }
    }
}

def parseSecretScanResults() {
    // Parse results from multiple secret scanning tools
    def secrets = []
    
    // Parse TruffleHog results
    if (fileExists('trufflehog-results.json')) {
        def truffleResults = readJSON file: 'trufflehog-results.json'
        secrets.addAll(truffleResults.findings ?: [])
    }
    
    // Parse detect-secrets results
    if (fileExists('detect-secrets-results.json')) {
        def detectResults = readJSON file: 'detect-secrets-results.json'
        secrets.addAll(detectResults.results ?: [])
    }
    
    return secrets
}

def validateSecretFormat(secretId, secretValue) {
    switch(secretId) {
        case 'api-key':
            if (!secretValue.matches(/^[A-Za-z0-9]{32,}$/)) {
                error("API key format validation failed")
            }
            break
        case 'database-password':
            if (secretValue.length() < 12) {
                error("Database password does not meet minimum length requirement")
            }
            break
        default:
            echo "No specific validation for ${secretId}"
    }
}