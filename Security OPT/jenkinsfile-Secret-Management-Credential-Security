Secret Management and Credential Security
Advanced Secret Handling
Implementing comprehensive secret management protects sensitive information throughout the CI/CD pipeline lifecycle.

HashiCorp Vault Integration provides enterprise-grade secret management with dynamic credential generation:

groovy
pipeline {
    agent any
    environment {
        VAULT_ADDR = 'https://vault.company.com'
        VAULT_NAMESPACE = 'engineering'
    }
    stages {
        stage('Vault Authentication') {
            steps {
                script {
                    // Authenticate with Vault using Jenkins service account
                    withCredentials([string(credentialsId: 'vault-role-id', variable: 'ROLE_ID'),
                                   string(credentialsId: 'vault-secret-id', variable: 'SECRET_ID')]) {
                        
                        def vaultToken = sh(
                            script: """
                                curl -s -X POST ${VAULT_ADDR}/v1/auth/approle/login \\
                                     -d '{"role_id":"${ROLE_ID}","secret_id":"${SECRET_ID}"}' | \\
                                jq -r '.auth.client_token'
                            """,
                            returnStdout: true
                        ).trim()
                        
                        env.VAULT_TOKEN = vaultToken
                    }
                }
            }
        }
        stage('Dynamic Secret Generation') {
            steps {
                script {
                    // Generate dynamic database credentials
                    def dbCreds = sh(
                        script: """
                            curl -s -H 'X-Vault-Token: ${VAULT_TOKEN}' \\
                                 -X GET ${VAULT_ADDR}/v1/database/creds/readonly-role | \\
                            jq -r '.data | @base64'
                        """,
                        returnStdout: true
                    ).trim()
                    
                    // Generate dynamic AWS credentials
                    def awsCreds = sh(
                        script: """
                            curl -s -H 'X-Vault-Token: ${VAULT_TOKEN}' \\
                                 -X GET ${VAULT_ADDR}/v1/aws/creds/deployment-role | \\
                            jq -r '.data | @base64'
                        """,
                        returnStdout: true
                    ).trim()
                    
                    // Store credentials securely for pipeline use
                    env.DB_CREDENTIALS = dbCreds
                    env.AWS_CREDENTIALS = awsCreds
                }
            }
        }
        stage('Secure Application Deployment') {
            steps {
                script {
                    // Decode and use dynamic credentials
                    def dbCreds = new String(env.DB_CREDENTIALS.decodeBase64())
                    def awsCreds = new String(env.AWS_CREDENTIALS.decodeBase64())
                    
                    // Deploy application with dynamic credentials
                    sh """
                        export DB_CREDENTIALS='${dbCreds}'
                        export AWS_CREDENTIALS='${awsCreds}'
                        ./deploy-application.sh
                    """
                }
            }
        }
    }
    post {
        always {
            script {
                // Revoke dynamic credentials
                if (env.VAULT_TOKEN) {
                    sh """
                        curl -s -H 'X-Vault-Token: ${VAULT_TOKEN}' \\
                             -X POST ${VAULT_ADDR}/v1/auth/token/revoke-self
                    """
                }
                
                // Clear sensitive environment variables
                env.VAULT_TOKEN = null
                env.DB_CREDENTIALS = null
                env.AWS_CREDENTIALS = null
            }
        }
    }
}
Encrypted Secret Storage implements multiple layers of encryption for sensitive data protection:

groovy
pipeline {
    agent any
    stages {
        stage('Encrypted Secret Handling') {
            steps {
                script {
                    // Use Jenkins built-in credential encryption
                    withCredentials([
                        usernamePassword(credentialsId: 'database-creds', usernameVariable: 'DB_USER', passwordVariable: 'DB_PASS'),
                        string(credentialsId: 'api-key', variable: 'API_KEY'),
                        file(credentialsId: 'ssl-cert', variable: 'SSL_CERT_FILE')
                    ]) {
                        // Additional encryption layer for extra sensitive data
                        def encryptedConfig = encryptSensitiveConfig([
                            database_url: "postgresql://${DB_USER}:${DB_PASS}@db.company.com/prod",
                            api_endpoint: "https://api.company.com/v1",
                            api_key: API_KEY
                        ])
                        
                        // Store encrypted configuration temporarily
                        writeFile file: 'encrypted-config.json', text: encryptedConfig
                        
                        // Use encrypted configuration in deployment
                        sh './deploy-with-encrypted-config.sh encrypted-config.json'
                    }
                }
            }
        }
        stage('Secret Rotation Validation') {
            steps {
                script {
                    // Check for credential rotation requirements
                    def credentialAge = getCredentialAge('database-creds')
                    if (credentialAge > 90) {
                        currentBuild.result = 'UNSTABLE'
                        echo "WARNING: Database credentials are ${credentialAge} days old - rotation required"
                        
                        // Trigger credential rotation workflow
                        build job: 'credential-rotation', parameters: [
                            string(name: 'CREDENTIAL_ID', value: 'database-creds'),
                            string(name: 'ROTATION_REASON', value: 'Automated age-based rotation')
                        ], wait: false
                    }
                }
            }
        }
    }
    post {
        always {
            // Secure cleanup of temporary files
            sh 'find . -name "encrypted-config.json" -exec shred -vfz -n 3 {} \\;'
            sh 'find . -name "*.key" -exec shred -vfz -n 3 {} \\;'
        }
    }
}

def encryptSensitiveConfig(config) {
    // Implement additional encryption using GPG or similar
    def configJson = groovy.json.JsonBuilder(config).toString()
    def encryptedConfig = sh(
        script: "echo '${configJson}' | gpg --cipher-algo AES256 --compress-algo 1 --symmetric --armor --passphrase-file /opt/jenkins/encryption-key",
        returnStdout: true
    ).trim()
    return encryptedConfig
}

def getCredentialAge(credentialId) {
    // Implementation to check credential creation/update date
    return 45 // Placeholder return value
}