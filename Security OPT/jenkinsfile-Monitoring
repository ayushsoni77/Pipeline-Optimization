Continuous Security Monitoring and Incident Response
Security Monitoring Pipeline
Implementing comprehensive security monitoring provides continuous visibility into security posture and threat detection.

Automated Security Monitoring continuously monitors Jenkins infrastructure and pipeline security:

groovy
pipeline {
    agent any
    triggers {
        cron('H/30 * * * *') // Run every 30 minutes
    }
    stages {
        stage('Security Health Check') {
            parallel {
                stage('Authentication Monitoring') {
                    steps {
                        script {
                            // Monitor authentication events
                            def authLogs = sh(
                                script: '''
                                    grep "Authentication" ${JENKINS_HOME}/logs/jenkins.log | tail -100 | 
                                    grep -E "(failed|denied|blocked)" || true
                                ''',
                                returnStdout: true
                            ).trim()
                            
                            if (authLogs) {
                                def failedAttempts = authLogs.split('\n').size()
                                if (failedAttempts > 10) {
                                    currentBuild.result = 'UNSTABLE'
                                    echo "WARNING: ${failedAttempts} failed authentication attempts detected"
                                    
                                    // Trigger security alert
                                    triggerSecurityAlert('authentication', failedAttempts)
                                }
                            }
                        }
                    }
                }
                stage('Plugin Security Check') {
                    steps {
                        script {
                            // Check for plugin security advisories
                            def installedPlugins = getInstalledPlugins()
                            def vulnerablePlugins = checkPluginVulnerabilities(installedPlugins)
                            
                            if (vulnerablePlugins.size() > 0) {
                                currentBuild.result = 'UNSTABLE'
                                echo "Vulnerable plugins detected: ${vulnerablePlugins}"
                                
                                // Generate plugin security report
                                generatePluginSecurityReport(vulnerablePlugins)
                            }
                        }
                    }
                }
                stage('System Integrity Check') {
                    steps {
                        script {
                            // Check file integrity
                            sh '''
                                # Check for unauthorized modifications
                                find ${JENKINS_HOME} -name "*.jar" -newer /tmp/last-check 2>/dev/null | head -10
                                
                                # Update timestamp
                                touch /tmp/last-check
                                
                                # Check for suspicious processes
                                ps aux | grep -E "(nc|netcat|wget|curl)" | grep -v grep || true
                                
                                # Check network connections
                                netstat -tuln | grep -E ":(22|23|21|3389|4444|5555)" || true
                            '''
                        }
                    }
                }
            }
        }
        stage('Threat Intelligence Integration') {
            steps {
                script {
                    // Check IP addresses against threat intelligence
                    def recentIPs = extractRecentIPAddresses()
                    def maliciousIPs = checkThreatIntelligence(recentIPs)
                    
                    if (maliciousIPs.size() > 0) {
                        currentBuild.result = 'FAILURE'
                        error("Malicious IP addresses detected: ${maliciousIPs}")
                    }
                    
                    // Update security metrics
                    updateSecurityMetrics()
                }
            }
        }
    }
    post {
        always {
            // Archive security monitoring results
            archiveArtifacts artifacts: 'security-*.json', allowEmptyArchive: true
        }
        unstable {
            // Send security notifications
            emailext(
                subject: "Security Monitoring Alert - ${env.JOB_NAME}",
                body: "Security monitoring has detected potential issues requiring attention.",
                to: "${env.SECURITY_TEAM_EMAIL}"
            )
        }
    }
}

def getInstalledPlugins() {
    def plugins = sh(
        script: 'find ${JENKINS_HOME}/plugins -name "*.jpi" -exec basename {} .jpi \\;',
        returnStdout: true
    ).trim().split('\n')
    return plugins
}

def checkPluginVulnerabilities(plugins) {
    // Check plugins against security advisory database
    def vulnerablePlugins = []
    
    plugins.each { plugin ->
        def advisory = sh(
            script: "curl -s https://www.jenkins.io/security/advisories/ | grep -i '${plugin}' || true",
            returnStdout: true
        ).trim()
        
        if (advisory) {
            vulnerablePlugins.add(plugin)
        }
    }
    
    return vulnerablePlugins
}

def triggerSecurityAlert(alertType, details) {
    // Trigger security incident response
    build job: 'security-incident-response', parameters: [
        string(name: 'ALERT_TYPE', value: alertType),
        string(name: 'DETAILS', value: details.toString()),
        string(name: 'SEVERITY', value: 'MEDIUM')
    ], wait: false
}

def extractRecentIPAddresses() {
    def ips = sh(
        script: '''
            grep -E "([0-9]{1,3}\\.){3}[0-9]{1,3}" ${JENKINS_HOME}/logs/jenkins.log | 
            grep -oE "([0-9]{1,3}\\.){3}[0-9]{1,3}" | 
            sort | uniq | tail -50
        ''',
        returnStdout: true
    ).trim().split('\n')
    return ips
}

def checkThreatIntelligence(ipAddresses) {
    def maliciousIPs = []
    
    ipAddresses.each { ip ->
        // Check against threat intelligence feeds
        def threatCheck = sh(
            script: "curl -s 'https://api.threatintel.com/check?ip=${ip}' | jq -r '.malicious'",
            returnStdout: true
        ).trim()
        
        if (threatCheck == 'true') {
            maliciousIPs.add(ip)
        }
    }
    
    return maliciousIPs
}

def generatePluginSecurityReport(vulnerablePlugins) {
    def report = [
        timestamp: new Date().format('yyyy-MM-dd HH:mm:ss'),
        vulnerablePlugins: vulnerablePlugins,
        recommendedActions: [
            'Update vulnerable plugins to latest versions',
            'Review plugin security advisories',
            'Consider alternative plugins if updates unavailable'
        ]
    ]
    
    writeFile file: 'security-plugin-report.json', text: groovy.json.JsonBuilder(report).toPrettyString()
}

def updateSecurityMetrics() {
    // Send metrics to monitoring system
    sh '''
        curl -X POST http://metrics-server/api/security-metrics \\
             -H "Content-Type: application/json" \\
             -d "{
                 \\"timestamp\\": \\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\\",
                 \\"jenkins_instance\\": \\"${JENKINS_URL}\\",
                 \\"security_scan_status\\": \\"${BUILD_RESULT:-SUCCESS}\\"
             }"
    '''
}